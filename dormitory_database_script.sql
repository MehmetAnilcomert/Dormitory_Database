DROP TABLE ATTENDS;
DROP TABLE BILL;
DROP TABLE VISITOR;
DROP TABLE STUDENT;

DROP TABLE TASKLOG;
DROP TABLE ROOM;
DROP TABLE DININGHALL;

DROP TABLE TASK;
DROP TABLE SUPPLYLOG;
DROP TABLE STAFF;
DROP TABLE SUPPLY;

DROP SEQUENCE BILL_SEQ;
DROP SEQUENCE SUPPLYLOG_SEQ;
DROP SEQUENCE TASK_ID_SEQ;
DROP SEQUENCE Staff_id_sequence;


-- Incrementer for Bill and SUPPLY_LOG
CREATE SEQUENCE BILL_SEQ;
CREATE SEQUENCE SUPPLYLOG_SEQ;
CREATE SEQUENCE TASK_ID_SEQ;
CREATE SEQUENCE Staff_id_sequence;


CREATE TABLE ROOM(
    ID NUMBER(5) PRIMARY KEY,
    BED_CAPACITY NUMBER(1) NOT NULL CHECK (BED_CAPACITY >= 0),
    RESIDING_NUMBER NUMBER(1) DEFAULT 0,
    IS_AVAILABLE CHAR(1) DEFAULT 'T', -- T FOR TRUE, F FOR FALSE    
    CONSTRAINT chk_valid_capacity_residing CHECK (RESIDING_NUMBER <= BED_CAPACITY)
);

CREATE TABLE STUDENT(
    TC NUMBER(11) PRIMARY KEY,
    NAME VARCHAR2(30) NOT NULL, 
    SURNAME VARCHAR2(30) NOT NULL,
    PHONE_NUMBER NUMBER(11),        
    EMERGENCY_CALL NUMBER(11),              -- It is not unique, because siblings can reside in dorm at the same time.
    IS_ABSENT CHAR(1) DEFAULT 'F',          -- T FOR TRUE and student is absent or in holiday, F FOR FALSE and student is Not Absent or not in holiday
    ROOM_ID NUMBER(5)  REFERENCES ROOM(ID) ,
    IS_ACTIVE CHAR(1) DEFAULT 'T'          --if student leaves the dormitory, then ıs_active='F', this is necessary for keeping registers of all students living in this dormitory at least once.
);                                          
    
    
CREATE TABLE DININGHALL(
    DH_DATE DATE PRIMARY KEY,
    SEATING_CAPACITY NUMBER(4) CHECK (SEATING_CAPACITY >= 0),
    MORNING_MENU VARCHAR2(100) NOT NULL,  
    EVENING_MENU VARCHAR2(100) NOT NULL
);


CREATE TABLE ATTENDS(           --if a student have breakfast or dinner in the dininghall, it's records are entered here.
    TC NUMBER(11) REFERENCES STUDENT(TC),
    DH_DATE DATE REFERENCES DININGHALL(DH_DATE),
    PRIMARY KEY(TC,DH_DATE)
);


CREATE TABLE VISITOR(
    TC NUMBER(11) PRIMARY KEY,
    NAME VARCHAR2(30) NOT NULL, 
    SURNAME VARCHAR2(30) NOT NULL,
    VISIT_DATE DATE NOT NULL,
    STD_TC NUMBER(11) REFERENCES STUDENT(TC)
);

CREATE TABLE BILL(
    ID NUMBER(5) PRIMARY KEY,
    ASSIGN_DATE DATE NOT NULL,
    DUE_DATE DATE NOT NULL,
    AMOUNT NUMBER(4) NOT NULL,
    PAY_DATE DATE,
    STD_TC NUMBER(11) REFERENCES STUDENT(TC),
    CONSTRAINT chk_due_date_after_assign CHECK (DUE_DATE >= ASSIGN_DATE)
);

CREATE TABLE TASK(
    ID NUMBER(5) PRIMARY KEY,
    TASK_DESCRIPTION VARCHAR2(50)
);

CREATE TABLE STAFF(
    ID NUMBER(5) PRIMARY KEY,
    NAME VARCHAR2(30) NOT NULL, 
    SURNAME VARCHAR2(30) NOT NULL,
    JOB_TITLE VARCHAR2(30),
    SALARY NUMBER(7,2) CHECK(SALARY>0), 
    IS_AVAILABLE CHAR(1) DEFAULT 'T' CHECK(IS_AVAILABLE IN('T','F')),
    IS_ACTIVE CHAR(1) DEFAULT 'T'   --if staff leaves the job, we keep him/her in passive state so ıs_active='F', so that we can keep old records of this person in database system
);

CREATE TABLE TASKLOG(            
    ID NUMBER(5) PRIMARY KEY,
    ASSIGN_DATE DATE NOT NULL,
    COMPLETION DATE,
    TASK_ID REFERENCES TASK(ID),
    STAFF_ID REFERENCES STAFF(ID), 
    ROOM_ID REFERENCES ROOM(ID),
    DININGHALL_DATE REFERENCES DININGHALL(DH_DATE)
);

CREATE TABLE SUPPLY(
    ID NUMBER(5) PRIMARY KEY,  
    NAME VARCHAR2(30) NOT NULL, 
    QUANTITY NUMBER(5) CHECK (QUANTITY >= 0),  --total quantity of the supply, which is increased by amount attribute of supplylogs
    SUPPLIER VARCHAR2(30),
    PRICE_PER_UNIT NUMBER(5,2) CHECK (PRICE_PER_UNIT >= 0)
);

CREATE TABLE SUPPLYLOG(
    ID NUMBER(5) PRIMARY KEY,
    AMOUNT NUMBER(5),
    SUP_DATE DATE,
    STAFF_ID NUMBER(5) REFERENCES STAFF(ID),    --staff id is required to know who bouhgt this supply 
    SUPPLY_ID NUMBER(5) REFERENCES SUPPLY(ID),
    CONSTRAINT chk_amount_positive CHECK (AMOUNT >= 0)
);

-- --------- TRIGGERS -----------------------------------------------------------
-- A trigger for assigning a student into an available room after insertion of this student to the database.
CREATE OR REPLACE TRIGGER assign_room
BEFORE INSERT ON STUDENT
FOR EACH ROW
DECLARE
   room_count NUMBER;
   v_room_id ROOM.ID%TYPE;
   v_is_available CHAR(1);
BEGIN
   SELECT COUNT(*) INTO room_count
   FROM ROOM
   WHERE IS_AVAILABLE = 'T';

   IF room_count = 0 THEN
      RAISE_APPLICATION_ERROR(-20001, 'No available room found.');
   END IF;

   -- Assign student to a room
   SELECT ID, IS_AVAILABLE INTO v_room_id, v_is_available
   FROM (
      SELECT R.ID, R.IS_AVAILABLE
      FROM ROOM R
      LEFT JOIN STUDENT S ON R.ID = S.ROOM_ID
      WHERE R.IS_AVAILABLE = 'T'
      GROUP BY R.ID, R.BED_CAPACITY, R.IS_AVAILABLE
      HAVING COUNT(S.TC) < R.BED_CAPACITY
      ORDER BY R.ID
   )
   WHERE ROWNUM = 1;

   IF v_is_available = 'T' THEN
      :NEW.ROOM_ID := v_room_id;

      -- Update residing_number of room table
      UPDATE ROOM
      SET RESIDING_NUMBER = RESIDING_NUMBER + 1
      WHERE ID = :NEW.ROOM_ID;
   ELSE
      RAISE_APPLICATION_ERROR(-20001, 'No available room found.');
   END IF;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR(-20001, 'No available room found.');

END assign_room;
/


-- Preventing student update command when student is tried to move a full room trigger.
CREATE OR REPLACE TRIGGER update_student_room
BEFORE UPDATE ON STUDENT
FOR EACH ROW
DECLARE
 room_count NUMBER;
BEGIN
 SELECT COUNT(*) INTO room_count
 FROM ROOM
 WHERE ID = :NEW.ROOM_ID
 AND RESIDING_NUMBER >= BED_CAPACITY;

 IF room_count > 0 THEN
    RAISE_APPLICATION_ERROR(-20001, 'Room is already full.');
 END IF;

 -- Update student room_id
 :NEW.ROOM_ID := :NEW.ROOM_ID;

 -- Update residing_number of room table
 UPDATE ROOM
 SET RESIDING_NUMBER = RESIDING_NUMBER + 1
 WHERE ID = :NEW.ROOM_ID;

 UPDATE ROOM
 SET RESIDING_NUMBER = RESIDING_NUMBER - 1
 WHERE ID = :OLD.ROOM_ID;

EXCEPTION
 WHEN NO_DATA_FOUND THEN
    Raise_application_error(-20001, 'That room is full.');

END update_student_room;
/

-- Assigning a bill when a new student is inserted to database trigger.
-- Amount of payment is 400 by default, it should be changed with actual value
CREATE OR REPLACE TRIGGER ASSIGN_BILLS_TRIGGER
AFTER INSERT ON STUDENT
FOR EACH ROW
DECLARE
    v_bill_id NUMBER;
BEGIN
    -- Incrementer for Bill id
    SELECT BILL_SEQ.NEXTVAL INTO v_bill_id FROM DUAL;

    -- Assigning a bill
    INSERT INTO BILL (ID, ASSIGN_DATE, DUE_DATE, AMOUNT, STD_TC)
    VALUES (v_bill_id, TRUNC(SYSDATE, 'MM'), ADD_MONTHS(TRUNC(SYSDATE, 'MM'), 1) - 1, 400, :NEW.TC);
END;
/


-- This trigger provides that Supply log insertion without giving ID, Date exclusively in insert statement.
-- And also QUANTITY field of supply incremented by AMOUNT of SUPPLY_LOG
CREATE OR REPLACE TRIGGER SUPPLY_LOG_TRIGGER
BEFORE INSERT ON SUPPLYLOG
FOR EACH ROW
DECLARE
    V_SUPPLY_ID SUPPLY.ID%TYPE;
    V_AMOUNT NUMBER;
BEGIN
    -- Check if SUPPLY_ID exists in SUPPLY table
    SELECT ID, QUANTITY
    INTO V_SUPPLY_ID, V_AMOUNT
    FROM SUPPLY
    WHERE ID = :NEW.SUPPLY_ID;

    -- If SUPPLY_ID exists, update SUP_DATE and assign the next ID
    IF V_SUPPLY_ID IS NOT NULL THEN
        -- Increment the QUANTITY_IN_STOCK by the Amount in SUPPLY_LOG
        UPDATE SUPPLY
        SET QUANTITY = V_AMOUNT + :NEW.AMOUNT
        WHERE ID = :NEW.SUPPLY_ID;

        :NEW.SUP_DATE := SYSDATE;
        SELECT SUPPLYLOG_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20001, 'Error: SUPPLY not found in SUPPLY table.');
END;
/

-- Assigning increasing ID number to newly inserted Task description
CREATE OR REPLACE TRIGGER TASK_ID_TRIGGER
BEFORE INSERT ON TASK
FOR EACH ROW
DECLARE
    v_task_id NUMBER;
BEGIN
    -- Incrementer of TASK_ID
    SELECT TASK_ID_SEQ.NEXTVAL INTO v_task_id FROM DUAL;

    -- Assigning TASK_ID
    :NEW.ID := v_task_id;
END;
/

-- Increments Staff ID automatically before insertion.
CREATE OR REPLACE TRIGGER INCREMENT_STAFF_ID_TRIGGER
BEFORE INSERT ON STAFF
FOR EACH ROW
BEGIN
    :NEW.ID := Staff_id_sequence.NEXTVAL;
END;
/

-- Updating room of deleted student trigger
--if student leaves the dormitory, residing number of his/her room is decreased by 1.
CREATE OR REPLACE TRIGGER student_active_passive_update_trigger
AFTER UPDATE OF IS_ACTIVE ON STUDENT
FOR EACH ROW
DECLARE
  v_room_id NUMBER(5);
BEGIN
  
  SELECT ROOM_ID INTO v_room_id
  FROM student
  WHERE TC = :OLD.TC;

  UPDATE room
  SET RESIDING_NUMBER = RESIDING_NUMBER - 1
  WHERE ID = v_room_id;
END;
/

-- Insertion, Deletion, Update record samples -----------

-- Insert data into ROOM table
INSERT INTO ROOM (ID, BED_CAPACITY) VALUES (1, 4);
INSERT INTO ROOM (ID, BED_CAPACITY) VALUES (2, 4);
INSERT INTO ROOM (ID, BED_CAPACITY, IS_AVAILABLE) VALUES (3, 4, 'F');
INSERT INTO ROOM (ID, BED_CAPACITY) VALUES (4, 4);

-- Insert data into STUDENT table
INSERT INTO STUDENT (TC, NAME, SURNAME, PHONE_NUMBER, EMERGENCY_CALL) VALUES (11111111111, 'Mehmet', 'Cenk', 05554443301, 05554443321);
INSERT INTO STUDENT (TC, NAME, SURNAME, PHONE_NUMBER, EMERGENCY_CALL) VALUES (11111111112, 'Cenk', 'Kaya', 05554443302, 05554443322);
INSERT INTO STUDENT (TC, NAME, SURNAME, PHONE_NUMBER, EMERGENCY_CALL) VALUES (11111111113, 'Emre', 'Yılmaz', 05554443303, 05554443323);
INSERT INTO STUDENT (TC, NAME, SURNAME, PHONE_NUMBER, EMERGENCY_CALL) VALUES (11111111116, 'Eren', 'Yılmaz', 05554443304, 05554443324);
INSERT INTO STUDENT (TC, NAME, SURNAME, PHONE_NUMBER, EMERGENCY_CALL) VALUES (11111111115, 'Deniz', 'Demir', 05554443305, 05554443325);

INSERT INTO STUDENT (TC, NAME, SURNAME, PHONE_NUMBER, EMERGENCY_CALL) VALUES (23651890123, 'Efe', 'Demir', 05554443381, 05554443391);
INSERT INTO STUDENT (TC, NAME, SURNAME, PHONE_NUMBER, EMERGENCY_CALL) VALUES (23436890234, 'Oğuz', 'Arslan', 05554443382, 05554443392);
INSERT INTO STUDENT (TC, NAME, SURNAME, PHONE_NUMBER, EMERGENCY_CALL) VALUES (20756890567, 'Ali', 'Yıldırım', 05554443383, 05554443393);
INSERT INTO STUDENT (TC, NAME, SURNAME, PHONE_NUMBER, EMERGENCY_CALL) VALUES (23953890456, 'Yunus', 'Aydın', 05554443384, 05554443394);

-- Insert staff members into Staff table
INSERT INTO STAFF (NAME, SURNAME, JOB_TITLE, SALARY) VALUES ('Ahmet', 'Temiz', 'Cleaner', 11500);
INSERT INTO STAFF (NAME, SURNAME, JOB_TITLE, SALARY) VALUES ('Mustafa', 'Kale', 'Deputy Manager', 17500);
INSERT INTO STAFF (NAME, SURNAME, JOB_TITLE, SALARY) VALUES ('Mehmet', 'Ersan', 'Deputy Manager', 17500);
INSERT INTO STAFF (NAME, SURNAME, JOB_TITLE, SALARY) VALUES ('İsmail', 'Uçum', 'Security', 11500);
INSERT INTO STAFF (NAME, SURNAME, JOB_TITLE, SALARY) VALUES ('Doğukan', 'Şapçı', 'Repairer', 12500);

-- Insert data into SUPPLY table
INSERT INTO SUPPLY VALUES (1, 'Paper', 100, 'Office Supplies Inc.', 2.5);
INSERT INTO SUPPLY VALUES (2, 'Toilet Paper', 200, 'Cleaning Supplies Co.', 1.5);
INSERT INTO SUPPLY VALUES (3, 'Dish Soap', 50, 'Kitchen Supplies Ltd.', 3.0);
INSERT INTO SUPPLY VALUES (4, 'Bed Sheets', 50, 'Bedding Emporium', 15.0);

-- Insert data into SUPPLY_LOG table
INSERT INTO SUPPLYLOG (AMOUNT, STAFF_ID, SUPPLY_ID) VALUES (50, 1, 1);
INSERT INTO SUPPLYLOG (AMOUNT, STAFF_ID, SUPPLY_ID) VALUES (30, 2, 2);
INSERT INTO SUPPLYLOG (AMOUNT, STAFF_ID, SUPPLY_ID) VALUES (25, 3, 3);
INSERT INTO SUPPLYLOG (AMOUNT, STAFF_ID, SUPPLY_ID) VALUES (40, 4, 4);
INSERT INTO SUPPLYLOG (AMOUNT, STAFF_ID, SUPPLY_ID) VALUES (20, 5, 5);
INSERT INTO SUPPLYLOG (AMOUNT, STAFF_ID, SUPPLY_ID) VALUES (15, 6, 6);
INSERT INTO SUPPLYLOG (AMOUNT, STAFF_ID, SUPPLY_ID) VALUES (10, 7, 7);

-- DININGHALL Table
INSERT INTO DININGHALL (DH_DATE, SEATING_CAPACITY, MORNING_MENU, EVENING_MENU) VALUES
('01-01-2024', 150, 'Simit, Beyaz Peynir, Zeytin, Domates, Salatalık, Çay', 'Karnabahar Yemeği, Pilav, Cacık');

INSERT INTO DININGHALL (DH_DATE, SEATING_CAPACITY, MORNING_MENU, EVENING_MENU) VALUES
('01-02-2024', 120, 'Menemen, Pastırma, Sucuk, Kaşar Peyniri, Zeytin, Çay', 'Fırın Tavuk, Pilav, Şehriyeli Yoğurtlu Çorba');

INSERT INTO DININGHALL (DH_DATE, SEATING_CAPACITY, MORNING_MENU, EVENING_MENU) VALUES
('01-03-2024', 180, 'Tost, Yumurta, Süt', 'Balık Izgara, Bulgur Pilavı, Yeşillik Salatası');

-- ATTENDS Table
INSERT INTO ATTENDS (TC, DH_DATE) VALUES (90123457890, '01-01-2024');
INSERT INTO ATTENDS (TC, DH_DATE) VALUES (11111111112, '01-01-2024');
INSERT INTO ATTENDS (TC, DH_DATE) VALUES (11111111113, '01-01-2024');
INSERT INTO ATTENDS (TC, DH_DATE) VALUES (11111111116, '01-01-2024');

INSERT INTO ATTENDS (TC, DH_DATE) VALUES (90123457890, '01-02-2024');
INSERT INTO ATTENDS (TC, DH_DATE) VALUES (11111111112, '01-02-2024');
INSERT INTO ATTENDS (TC, DH_DATE) VALUES (11111111113, '01-02-2024');
INSERT INTO ATTENDS (TC, DH_DATE) VALUES (11111111116, '01-02-2024');

-- Insert 20 Visitor data into Visitor table
INSERT INTO VISITOR (TC, NAME, SURNAME, VISIT_DATE, STD_TC) VALUES (23556890123, 'Halil', 'Atik', SYSDATE, 23416890123);
INSERT INTO VISITOR (TC, NAME, SURNAME, VISIT_DATE, STD_TC) VALUES (23466890123, 'Mesut', 'Çoban', SYSDATE, 20456890183);
INSERT INTO VISITOR (TC, NAME, SURNAME, VISIT_DATE, STD_TC) VALUES (21456890183, 'Hami', 'Yılmaz', SYSDATE, 23453890127);
INSERT INTO VISITOR (TC, NAME, SURNAME, VISIT_DATE, STD_TC) VALUES (26453890127, 'Kaan', 'Dinç', SYSDATE, 23656810123);
INSERT INTO VISITOR (TC, NAME, SURNAME, VISIT_DATE, STD_TC) VALUES (23656810123, 'Latife', 'Atik', SYSDATE, 23456890123);
INSERT INTO VISITOR (TC, NAME, SURNAME, VISIT_DATE, STD_TC) VALUES (29456890123, 'Ayşe', 'Çoban', SYSDATE, 23416890123);

-- TASK Table
INSERT INTO TASK (TASK_DESCRIPTION) VALUES ('Attend Dormitory Meeting');
INSERT INTO TASK (TASK_DESCRIPTION) VALUES ('Clean A Room');
INSERT INTO TASK (TASK_DESCRIPTION) VALUES ('Submit Monthly Report');
INSERT INTO TASK (TASK_DESCRIPTION) VALUES ('Sweep the floor of Dining Hall');
INSERT INTO TASK (TASK_DESCRIPTION) VALUES ('Attend Fire Drill Training');

-- Sample INSERT statements for TASKLOG table with assignment dates and completion dates having 1-5 days difference
INSERT INTO TASKLOG VALUES (1, '12/01/2023', '12/03/2023', 1, 2, NULL, NULL);
INSERT INTO TASKLOG VALUES (2, '12/01/2023', '12/05/2023', 2, 1, 2, NULL); 
INSERT INTO TASKLOG VALUES (3, '12/02/2023', '12/08/2023', 3, 3, NULL, NULL);
INSERT INTO TASKLOG VALUES (4, '12/24/2023', '01/01/2024', 4, 6, NULL, '01/01/2024');
INSERT INTO TASKLOG VALUES (5, '12/04/2023', '12/06/2023', 5, 16, NULL, NULL);
INSERT INTO TASKLOG VALUES (6, '12/06/2023', '12/13/2023', 6, 9, 12, NULL);
